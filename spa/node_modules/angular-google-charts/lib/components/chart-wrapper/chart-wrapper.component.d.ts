/// <reference types="@types/google.visualization" />
import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ChartErrorEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartBase } from '../chart-base/chart-base.component';
import * as ɵngcc0 from '@angular/core';
export declare class ChartWrapperComponent implements ChartBase, OnChanges, OnInit {
    private element;
    private scriptLoaderService;
    /**
     * Either a JSON object defining the chart, or a serialized string version of that object.
     * The format of this object is shown in the
     * {@link https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart `drawChart()`} documentation.
     *
     * The `container` and `containerId` will be overwritten by this component to allow
     * rendering the chart into the components' template.
     */
    specs: google.visualization.ChartSpecs;
    error: EventEmitter<ChartErrorEvent>;
    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;
    select: EventEmitter<ChartSelectionChangedEvent>;
    private wrapper;
    private wrapperReadySubject;
    private initialized;
    constructor(element: ElementRef, scriptLoaderService: ScriptLoaderService);
    readonly chart: google.visualization.ChartBase | null;
    readonly wrapperReady$: import("rxjs").Observable<google.visualization.ChartWrapper>;
    chartWrapper: google.visualization.ChartWrapper | null;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private updateChart;
    private drawChart;
    private registerChartEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartWrapperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChartWrapperComponent, "chart-wrapper", ["chartWrapper"], { "specs": "specs"; }, { "error": "error"; "ready": "ready"; "select": "select"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtd3JhcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2hhcnQtd3JhcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkB0eXBlcy9nb29nbGUudmlzdWFsaXphdGlvblwiIC8+XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDaGFydEVycm9yRXZlbnQsIENoYXJ0UmVhZHlFdmVudCwgQ2hhcnRTZWxlY3Rpb25DaGFuZ2VkRXZlbnQgfSBmcm9tICcuLi8uLi9tb2RlbHMvZXZlbnRzLm1vZGVsJztcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zY3JpcHQtbG9hZGVyL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFydEJhc2UgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENoYXJ0V3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIENoYXJ0QmFzZSwgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHNjcmlwdExvYWRlclNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgSlNPTiBvYmplY3QgZGVmaW5pbmcgdGhlIGNoYXJ0LCBvciBhIHNlcmlhbGl6ZWQgc3RyaW5nIHZlcnNpb24gb2YgdGhhdCBvYmplY3QuXG4gICAgICogVGhlIGZvcm1hdCBvZiB0aGlzIG9iamVjdCBpcyBzaG93biBpbiB0aGVcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yZWZlcmVuY2UjZ29vZ2xlLnZpc3VhbGl6YXRpb24uZHJhd2NoYXJ0IGBkcmF3Q2hhcnQoKWB9IGRvY3VtZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGUgYGNvbnRhaW5lcmAgYW5kIGBjb250YWluZXJJZGAgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGlzIGNvbXBvbmVudCB0byBhbGxvd1xuICAgICAqIHJlbmRlcmluZyB0aGUgY2hhcnQgaW50byB0aGUgY29tcG9uZW50cycgdGVtcGxhdGUuXG4gICAgICovXG4gICAgc3BlY3M6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0U3BlY3M7XG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxDaGFydEVycm9yRXZlbnQ+O1xuICAgIHJlYWR5OiBFdmVudEVtaXR0ZXI8Q2hhcnRSZWFkeUV2ZW50PGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0QmFzZT4+O1xuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0aW9uQ2hhbmdlZEV2ZW50PjtcbiAgICBwcml2YXRlIHdyYXBwZXI7XG4gICAgcHJpdmF0ZSB3cmFwcGVyUmVhZHlTdWJqZWN0O1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgc2NyaXB0TG9hZGVyU2VydmljZTogU2NyaXB0TG9hZGVyU2VydmljZSk7XG4gICAgcmVhZG9ubHkgY2hhcnQ6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0QmFzZSB8IG51bGw7XG4gICAgcmVhZG9ubHkgd3JhcHBlclJlYWR5JDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0V3JhcHBlcj47XG4gICAgY2hhcnRXcmFwcGVyOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydFdyYXBwZXIgfCBudWxsO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVDaGFydDtcbiAgICBwcml2YXRlIGRyYXdDaGFydDtcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ2hhcnRFdmVudHM7XG59XG4iXX0=