import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { ChartEditorComponent } from './components/chart-editor/chart-editor.component';
import { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';
import { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { GoogleChartComponent } from './components/google-chart/google-chart.component';
import { GOOGLE_CHARTS_CONFIG } from './models/injection-tokens.model';
import * as ɵngcc0 from '@angular/core';
var GoogleChartsModule = /** @class */ (function () {
    function GoogleChartsModule() {
    }
    GoogleChartsModule_1 = GoogleChartsModule;
    GoogleChartsModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: GoogleChartsModule_1,
            providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]
        };
    };
    var GoogleChartsModule_1;
GoogleChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GoogleChartsModule });
GoogleChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GoogleChartsModule_Factory(t) { return new (t || GoogleChartsModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GoogleChartsModule, { declarations: function () { return [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]; }, exports: function () { return [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartsModule, [{
        type: NgModule,
        args: [{
                declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],
                exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]
            }]
    }], function () { return []; }, null); })();
    return GoogleChartsModule;
}());
export { GoogleChartsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWdvb2dsZS1jaGFydHMvbGliL2dvb2dsZS1jaGFydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUV4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFNdkU7QUFDb0IsSUFEcEI7QUFBZ0MsSUFPaEMsQ0FBQztBQUNELDJCQVJhLGtCQUFrQjtBQUFFLElBQ2pCLDBCQUFPLEdBQXJCLFVBQXNCLE1BQStCO0FBQUksUUFBbkMsdUJBQUEsRUFBQSxXQUErQjtBQUFJLFFBQ3ZELE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxvQkFBa0I7QUFDbEMsWUFBTSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDdEUsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0Y7SUFQWSxrQkFBa0IsK0NBSjlCLFFBQVEsQ0FBQztXQUNSLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLG9CQUFvQixDQUFDO0dBQzlILE9BQU8sRUFBRSxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLG9CQUFvQixDQUFDLFVBQzFILENBQUMsUUFDVyxrQkFBa0IsQ0FPOUI7Ozs7Ozs7Z0RBQ0Q7QUFBQyxJQURELHlCQUFDO0FBQ0EsQ0FEQSxBQVBELElBT0M7QUFDRCxTQVJhLGtCQUFrQjtBQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENoYXJ0RWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2NoYXJ0LWVkaXRvci9jaGFydC1lZGl0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IENoYXJ0V3JhcHBlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jaGFydC13cmFwcGVyL2NoYXJ0LXdyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xXcmFwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRyb2wtd3JhcHBlci9jb250cm9sLXdyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERhc2hib2FyZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHb29nbGVDaGFydENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nb29nbGUtY2hhcnQvZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNDb25maWcgfSBmcm9tICcuL21vZGVscy9nb29nbGUtY2hhcnRzLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBHT09HTEVfQ0hBUlRTX0NPTkZJRyB9IGZyb20gJy4vbW9kZWxzL2luamVjdGlvbi10b2tlbnMubW9kZWwnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtHb29nbGVDaGFydENvbXBvbmVudCwgQ2hhcnRXcmFwcGVyQ29tcG9uZW50LCBEYXNoYm9hcmRDb21wb25lbnQsIENvbnRyb2xXcmFwcGVyQ29tcG9uZW50LCBDaGFydEVkaXRvckNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtHb29nbGVDaGFydENvbXBvbmVudCwgQ2hhcnRXcmFwcGVyQ29tcG9uZW50LCBEYXNoYm9hcmRDb21wb25lbnQsIENvbnRyb2xXcmFwcGVyQ29tcG9uZW50LCBDaGFydEVkaXRvckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2hhcnRzTW9kdWxlIHtcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZzogR29vZ2xlQ2hhcnRzQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEdvb2dsZUNoYXJ0c01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogR29vZ2xlQ2hhcnRzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBHT09HTEVfQ0hBUlRTX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==