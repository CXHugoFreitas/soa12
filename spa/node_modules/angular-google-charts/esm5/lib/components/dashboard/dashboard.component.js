import { __decorate, __metadata, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';
import { combineLatest } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var DashboardComponent = /** @class */ (function () {
    function DashboardComponent(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        /**
         * The dashboard has completed drawing and is ready to accept changes.
         *
         * The ready event will also fire:
         * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,
         * - after redrawing any chart on the dashboard.
         */
        this.ready = new EventEmitter();
        /**
         * Emits when an error occurs when attempting to render the dashboard.
         * One or more of the controls and charts that are part of the dashboard may have failed rendering.
         */
        this.error = new EventEmitter();
        this.initialized = false;
    }
    DashboardComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loaderService.loadChartPackages('controls').subscribe(function () {
            _this.createDataTable();
            _this.createDashboard();
            _this.initialized = true;
        });
    };
    DashboardComponent.prototype.ngOnChanges = function (changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.data || changes.columns) {
            this.createDataTable();
            this.dashboard.draw(this.dataTable);
        }
    };
    DashboardComponent.prototype.createDashboard = function () {
        var _this = this;
        // TODO: This should happen in the control wrapper
        // However, I don't yet know how to do this because then `bind()` would get called multiple times
        // for the same control if something changes. This is not supported by google charts as far as I can tell
        // from their source code.
        var controlWrappersReady$ = this.controlWrappers.map(function (control) { return control.wrapperReady$; });
        var chartsReady$ = this.controlWrappers
            .map(function (control) { return control.for; })
            .map(function (charts) {
            if (Array.isArray(charts)) {
                // CombineLatest waits for all observables
                return combineLatest(charts.map(function (chart) { return chart.wrapperReady$; }));
            }
            else {
                return charts.wrapperReady$;
            }
        });
        // We have to wait for all chart wrappers and control wrappers to be initialized
        // before we can compose them together to create the dashboard
        combineLatest(__spread(controlWrappersReady$, chartsReady$)).subscribe(function () {
            _this.dashboard = new google.visualization.Dashboard(_this.element.nativeElement);
            _this.initializeBindings();
            _this.dashboard.draw(_this.dataTable);
        });
    };
    DashboardComponent.prototype.initializeBindings = function () {
        var _this = this;
        this.controlWrappers.forEach(function (control) {
            if (Array.isArray(control.for)) {
                var chartWrappers = control.for.map(function (chart) { return chart.chartWrapper; });
                _this.dashboard.bind(control.controlWrapper, chartWrappers);
            }
            else {
                _this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);
            }
        });
    };
    DashboardComponent.prototype.createDataTable = function () {
        if (this.data == null) {
            return;
        }
        var firstRowIsData = true;
        if (this.columns != null) {
            firstRowIsData = false;
        }
        this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
    };
    DashboardComponent.prototype.getDataAsTable = function () {
        if (this.columns) {
            return __spread([this.columns], this.data);
        }
        else {
            return this.data;
        }
    };
    DashboardComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DashboardComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DashboardComponent.prototype, "columns", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DashboardComponent.prototype, "ready", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DashboardComponent.prototype, "error", void 0);
    __decorate([
        ContentChildren(ControlWrapperComponent),
        __metadata("design:type", QueryList)
    ], DashboardComponent.prototype, "controlWrappers", void 0);
    DashboardComponent = __decorate([ __metadata("design:paramtypes", [ElementRef, ScriptLoaderService])
    ], DashboardComponent);
DashboardComponent.ɵfac = function DashboardComponent_Factory(t) { return new (t || DashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
DashboardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DashboardComponent, selectors: [["dashboard"]], contentQueries: function DashboardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ControlWrapperComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlWrappers = _t);
    } }, hostAttrs: [1, "dashboard"], inputs: { data: "data", columns: "columns" }, outputs: { ready: "ready", error: "error" }, exportAs: ["dashboard"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DashboardComponent, [{
        type: Component,
        args: [{
                selector: 'dashboard',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'dashboard',
                host: { class: 'dashboard' }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScriptLoaderService }]; }, { ready: [{
            type: Output
        }], error: [{
            type: Output
        }], data: [{
            type: Input
        }], columns: [{
            type: Input
        }], controlWrappers: [{
            type: ContentChildren,
            args: [ControlWrapperComponent]
        }] }); })();
    return DashboardComponent;
}());
export { DashboardComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,