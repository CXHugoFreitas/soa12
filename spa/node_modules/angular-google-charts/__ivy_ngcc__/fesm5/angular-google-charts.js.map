{"version":3,"file":"angular-google-charts.js","sources":["ng:/angular-google-charts/lib/components/chart-editor/chart-editor-ref.ts","ng:/angular-google-charts/lib/models/injection-tokens.model.ts","ng:/angular-google-charts/lib/script-loader/script-loader.service.ts","ng:/angular-google-charts/lib/components/chart-editor/chart-editor.component.ts","ng:/angular-google-charts/lib/models/chart-type.model.ts","ng:/angular-google-charts/lib/helpers/id.helper.ts","ng:/angular-google-charts/lib/models/control-type.model.ts","ng:/angular-google-charts/lib/components/control-wrapper/control-wrapper.component.ts","ng:/angular-google-charts/lib/components/dashboard/dashboard.component.ts","ng:/angular-google-charts/lib/components/google-chart/google-chart.component.ts","ng:/angular-google-charts/lib/components/chart-wrapper/chart-wrapper.component.ts","ng:/angular-google-charts/lib/helpers/chart.helper.ts","ng:/angular-google-charts/lib/google-charts.module.ts","ng:/angular-google-charts/index.ts","ng:/angular-google-charts/angular-google-charts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nexport type EditChartResult = google.visualization.ChartWrapper | null;\n\nexport class ChartEditorRef {\n  private readonly doneSubject = new Subject<EditChartResult>();\n\n  constructor(private readonly editor: google.visualization.ChartEditor) {\n    this.addEventListeners();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n  public afterClosed(): Observable<EditChartResult> {\n    return this.doneSubject.asObservable();\n  }\n\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n  public cancel() {\n    this.editor.closeDialog();\n  }\n\n  private addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      const updatedChartWrapper = this.editor.getChartWrapper();\n\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { GoogleChartsConfig } from './google-charts-config.model';\n\nexport const GOOGLE_CHARTS_CONFIG = new InjectionToken<GoogleChartsConfig>('GOOGLE_CHARTS_CONFIG');\n","import { Inject, Injectable, LOCALE_ID, NgZone, Optional } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { GoogleChartsConfig } from '../models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from '../models/injection-tokens.model';\n\nconst DEFAULT_CONFIG: GoogleChartsConfig = {\n  mapsApiKey: '',\n  version: 'current',\n  safeMode: false\n};\n\n@Injectable({ providedIn: 'root' })\nexport class ScriptLoaderService {\n  private readonly scriptSource = 'https://www.gstatic.com/charts/loader.js';\n  private readonly scriptLoadSubject = new Subject<void>();\n\n  constructor(\n    private zone: NgZone,\n    @Inject(LOCALE_ID) private localeId: string,\n    @Inject(GOOGLE_CHARTS_CONFIG) @Optional() private config?: GoogleChartsConfig\n  ) {\n    this.config = { ...DEFAULT_CONFIG, ...(config || {}) };\n  }\n\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n  public isGoogleChartsAvailable(): boolean {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n  public loadChartPackages(...packages: string[]): Observable<void> {\n    return this.loadGoogleCharts().pipe(\n      switchMap(() => {\n        return new Observable<void>(observer => {\n          const config = {\n            packages,\n            language: this.localeId,\n            mapsApiKey: this.config.mapsApiKey,\n            safeMode: this.config.safeMode\n          };\n\n          google.charts.load(this.config.version, config);\n          google.charts.setOnLoadCallback(() => {\n            this.zone.run(() => {\n              observer.next();\n              observer.complete();\n            });\n          });\n        });\n      })\n    );\n  }\n\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n  private loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(null);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  private isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  private getGoogleChartsScript(): HTMLScriptElement | null {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  private createGoogleChartsScript(): HTMLScriptElement {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\nimport { ChartEditorRef } from './chart-editor-ref';\n\n@Component({\n  selector: 'chart-editor',\n  template: `<ng-content></ng-content>`,\n  host: { class: 'chart-editor' },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartEditorComponent implements OnInit {\n  private editor: google.visualization.ChartEditor;\n  private initializedSubject = new Subject<google.visualization.ChartEditor>();\n\n  constructor(private scriptLoaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n  public get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  public ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  /**\n   * Opens the chart editor as an embedded dialog box on the page.\n   * If the editor gets saved, the components' chart will be updated with the result.\n   *\n   * @param component The chart to be edited.\n   * @returns A reference to the open editor.\n   */\n  public editChart(component: ChartBase): ChartEditorRef;\n  public editChart(component: ChartBase, options: google.visualization.ChartEditorOptions): ChartEditorRef;\n  public editChart(component: ChartBase, options?: google.visualization.ChartEditorOptions) {\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n\n    return handle;\n  }\n}\n","export enum ChartType {\n  AnnotationChart = 'AnnotationChart',\n  AreaChart = 'AreaChart',\n  Bar = 'Bar',\n  BarChart = 'BarChart',\n  BubbleChart = 'BubbleChart',\n  Calendar = 'Calendar',\n  CandlestickChart = 'CandlestickChart',\n  ColumnChart = 'ColumnChart',\n  ComboChart = 'ComboChart',\n  PieChart = 'PieChart',\n  Gantt = 'Gantt',\n  Gauge = 'Gauge',\n  GeoChart = 'GeoChart',\n  Histogram = 'Histogram',\n  Line = 'Line',\n  LineChart = 'LineChart',\n  Map = 'Map',\n  OrgChart = 'OrgChart',\n  Sankey = 'Sankey',\n  Scatter = 'Scatter',\n  ScatterChart = 'ScatterChart',\n  SteppedAreaChart = 'SteppedAreaChart',\n  Table = 'Table',\n  Timeline = 'Timeline',\n  TreeMap = 'TreeMap',\n  WordTree = 'wordtree'\n}\n","/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nexport function generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n","export enum FilterType {\n  Category = 'CategoryFilter',\n  ChartRange = 'ChartRangeFilter',\n  DateRange = 'DateRangeFilter',\n  NumberRange = 'NumberRangeFilter',\n  String = 'StringFilter'\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { generateRandomId } from '../../helpers/id.helper';\nimport { FilterType } from '../../models/control-type.model';\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'control-wrapper',\n  template: '',\n  host: { class: 'control-wrapper' },\n  exportAs: 'controlWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlWrapperComponent implements OnInit, OnChanges {\n  /**\n   * Charts controlled by this control wrapper. Can be a single chart or an array of charts.\n   */\n  @Input()\n  public for!: ChartBase | ChartBase[];\n\n  /**\n   * The class name of the control.\n   * The `google.visualization` package name can be omitted for Google controls.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper type=\"CategoryFilter\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public type!: FilterType;\n\n  /**\n   * An object describing the options for the control.\n   * You can use either JavaScript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper [options]=\"{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public options?: object;\n\n  /**\n   * An object describing the state of the control.\n   * The state collects all the variables that the user operating the control can affect.\n   *\n   * For example, a range slider state can be described in term of the positions that the low and high thumb\n   * of the slider occupy.\n   * You can use either Javascript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   *  ```html\n   * <control-wrapper [state]=\"{'lowValue': 20, 'highValue': 50}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public state?: object;\n\n  /**\n   * Emits when an error occurs when attempting to render the control.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  /**\n   * The control is ready to accept user interaction and for external method calls.\n   *\n   * Alternatively, you can listen for a ready event on the dashboard holding the control\n   * and call control methods only after the event was fired.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when the user interacts with the control, affecting its state.\n   * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n   *\n   * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n   */\n  @Output()\n  public stateChange = new EventEmitter<void>();\n\n  /**\n   * A generated id assigned to this components DOM element.\n   */\n  @HostBinding('id')\n  public readonly id = generateRandomId();\n\n  private _controlWrapper: google.visualization.ControlWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ControlWrapper>(1);\n  private initialized = false;\n\n  constructor(private loaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get controlWrapper(): google.visualization.ControlWrapper | null {\n    return this._controlWrapper;\n  }\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options);\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state);\n    }\n  }\n\n  private createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  private addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges\n} from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { Column, Row } from '../chart-base/chart-base.component';\nimport { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';\n\n@Component({\n  selector: 'dashboard',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'dashboard',\n  host: { class: 'dashboard' }\n})\nexport class DashboardComponent implements OnInit, OnChanges {\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * The dashboard has completed drawing and is ready to accept changes.\n   *\n   * The ready event will also fire:\n   * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n   * - after redrawing any chart on the dashboard.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when an error occurs when attempting to render the dashboard.\n   * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @ContentChildren(ControlWrapperComponent)\n  private controlWrappers: QueryList<ControlWrapperComponent>;\n\n  private dashboard: google.visualization.Dashboard;\n  private dataTable: google.visualization.DataTable;\n  private initialized = false;\n\n  constructor(private element: ElementRef, private loaderService: ScriptLoaderService) {}\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createDataTable();\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns) {\n      this.createDataTable();\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n\n  private createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers\n      .map(control => control.for)\n      .map(charts => {\n        if (Array.isArray(charts)) {\n          // CombineLatest waits for all observables\n          return combineLatest(charts.map(chart => chart.wrapperReady$));\n        } else {\n          return charts.wrapperReady$;\n        }\n      });\n\n    // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n\n  private initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { fromEvent, ReplaySubject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { ChartType } from '../../models/chart-type.model';\nimport {\n  ChartErrorEvent,\n  ChartMouseLeaveEvent,\n  ChartMouseOverEvent,\n  ChartReadyEvent,\n  ChartSelectionChangedEvent\n} from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase, Column, Row } from '../chart-base/chart-base.component';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\n\nexport interface Formatter {\n  formatter: google.visualization.DefaultFormatter;\n  colIndex: number;\n}\n\n@Component({\n  selector: 'google-chart',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'google-chart' },\n  exportAs: 'googleChart',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleChartComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * The type of the chart to create.\n   */\n  @Input()\n  public type!: ChartType;\n\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * A convenience property used to set the title of the chart.\n   *\n   * This can also be set using `options.title`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public title?: string;\n\n  /**\n   * A convenience property used to set the width of the chart in pixels.\n   *\n   * This can also be set using `options.width`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public width?: number;\n\n  /**\n   * A convenience property used to set the height of the chart in pixels.\n   *\n   * This can also be set using `options.height`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public height?: number;\n\n  /**\n   * The chart-specific options. All options listen in the Google Charts documentation applying\n   * to the chart type specified can be used here.\n   */\n  @Input()\n  public options: object = {};\n\n  /**\n   * Used to change the displayed value of the specified column in all rows.\n   *\n   * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n   * and the index of the column you want the formatter to get applied to.\n   */\n  @Input()\n  public formatters?: Formatter[];\n\n  /**\n   * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n   * Defaults to `false` and should only be used when specifying the width or height of the chart\n   * in percent.\n   *\n   * Note that this can impact performance.\n   */\n  @Input()\n  public dynamicResize = false;\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  @Output()\n  public mouseover = new EventEmitter<ChartMouseOverEvent>();\n\n  @Output()\n  public mouseleave = new EventEmitter<ChartMouseLeaveEvent>();\n\n  private dataTable: google.visualization.DataTable;\n  private resizeSubscription: Subscription;\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(\n    private element: ElementRef,\n    private scriptLoaderService: ScriptLoaderService,\n    @Optional() private dashboard?: DashboardComponent\n  ) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      this.createDataTable();\n\n      // Only ever create the wrapper once to allow animations to happen when someting changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n\n      this.drawChart();\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n      if (changes.data || changes.columns || changes.formatters) {\n        this.createDataTable();\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n    this.applyFormatters(this.dataTable);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n\n  private updateResizeListener() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = null;\n    }\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize')\n        .pipe(debounceTime(100))\n        .subscribe(() => {\n          if (this.initialized) {\n            this.drawChart();\n          }\n        });\n    }\n  }\n\n  private mergeOptions(): object {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n\n  private applyFormatters(dataTable: google.visualization.DataTable): void {\n    if (this.formatters == null) {\n      return;\n    }\n\n    for (const val of this.formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      registerChartEvent(this.chart, 'onmouseover', (event: ChartMouseOverEvent) => this.mouseover.emit(event));\n      registerChartEvent(this.chart, 'onmouseout', (event: ChartMouseLeaveEvent) => this.mouseleave.emit(event));\n      registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({ selection });\n      });\n\n      this.ready.emit({ chart: this.chart });\n    });\n\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n  }\n\n  private drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper.draw();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { ChartErrorEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'chart-wrapper',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'chart-wrapper' },\n  exportAs: 'chartWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartWrapperComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * Either a JSON object defining the chart, or a serialized string version of that object.\n   * The format of this object is shown in the\n   * {@link https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart `drawChart()`} documentation.\n   *\n   * The `container` and `containerId` will be overwritten by this component to allow\n   * rendering the chart into the components' template.\n   */\n  @Input()\n  public specs: google.visualization.ChartSpecs;\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(private element: ElementRef, private scriptLoaderService: ScriptLoaderService) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper | null {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {} as google.visualization.ChartSpecs;\n      }\n\n      const { containerId, container, ...specs } = this.specs;\n\n      // Only ever create the wrapper once to allow animations to happen if something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  private updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {} as google.visualization.ChartSpecs;\n    }\n\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable as any); // The typing here are not correct, this also accepts plain arrays\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n\n  private drawChart() {\n    this.wrapper.draw();\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({ selection });\n    });\n  }\n}\n","import { ChartType } from '../models/chart-type.model';\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nexport function getPackageForChart(type: ChartType): string {\n  return ChartTypesToPackages[type];\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ChartEditorComponent } from './components/chart-editor/chart-editor.component';\nimport { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';\nimport { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { GoogleChartComponent } from './components/google-chart/google-chart.component';\nimport { GoogleChartsConfig } from './models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from './models/injection-tokens.model';\n\n@NgModule({\n  declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n  exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n})\nexport class GoogleChartsModule {\n  public static forRoot(config: GoogleChartsConfig = {}): ModuleWithProviders<GoogleChartsModule> {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-google-charts\n */\n\n/// <reference path=\"./types/google.visualization/index.d.ts\" />\n\nexport * from './lib/components/chart-editor/chart-editor-ref';\nexport * from './lib/components/chart-editor/chart-editor.component';\nexport * from './lib/components/google-chart/google-chart.component';\nexport * from './lib/components/chart-wrapper/chart-wrapper.component';\nexport * from './lib/components/dashboard/dashboard.component';\nexport * from './lib/components/control-wrapper/control-wrapper.component';\nexport * from './lib/helpers/chart.helper';\nexport * from './lib/models/events.model';\nexport * from './lib/models/chart-type.model';\nexport * from './lib/models/control-type.model';\nexport * from './lib/components/chart-base/chart-base.component';\nexport * from './lib/script-loader/script-loader.service';\nexport * from './lib/google-charts.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {GoogleChartsConfig as ɵb} from './lib/models/google-charts-config.model';\nexport {GOOGLE_CHARTS_CONFIG as ɵa} from './lib/models/injection-tokens.model';"]}