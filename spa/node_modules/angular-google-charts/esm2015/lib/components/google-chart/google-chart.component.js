import { __decorate, __metadata, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Optional, Output, SimpleChanges } from '@angular/core';
import { fromEvent, ReplaySubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ChartType } from '../../models/chart-type.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { DashboardComponent } from '../dashboard/dashboard.component';
import * as ɵngcc0 from '@angular/core';
let GoogleChartComponent = class GoogleChartComponent {
    constructor(element, scriptLoaderService, dashboard) {
        this.element = element;
        this.scriptLoaderService = scriptLoaderService;
        this.dashboard = dashboard;
        /**
         * The chart-specific options. All options listen in the Google Charts documentation applying
         * to the chart type specified can be used here.
         */
        this.options = {};
        /**
         * If this is set to `true`, the chart will be redrawn if the browser window is resized.
         * Defaults to `false` and should only be used when specifying the width or height of the chart
         * in percent.
         *
         * Note that this can impact performance.
         */
        this.dynamicResize = false;
        this.ready = new EventEmitter();
        this.error = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    get chart() {
        if (!this.wrapper) {
            return null;
        }
        return this.wrapper.getChart();
    }
    get wrapperReady$() {
        return this.wrapperReadySubject.asObservable();
    }
    get chartWrapper() {
        return this.wrapper;
    }
    set chartWrapper(wrapper) {
        this.wrapper = wrapper;
        this.drawChart();
    }
    ngOnInit() {
        // We don't need to load any chart packages, the chart wrapper will handle this for us
        this.scriptLoaderService.loadChartPackages().subscribe(() => {
            this.createDataTable();
            // Only ever create the wrapper once to allow animations to happen when someting changes.
            this.wrapper = new google.visualization.ChartWrapper({
                container: this.element.nativeElement,
                chartType: this.type,
                dataTable: this.dataTable,
                options: this.mergeOptions()
            });
            this.registerChartEvents();
            this.wrapperReadySubject.next(this.wrapper);
            this.initialized = true;
            this.drawChart();
        });
    }
    ngOnChanges(changes) {
        if (changes.dynamicResize) {
            this.updateResizeListener();
        }
        if (this.initialized) {
            let shouldRedraw = false;
            if (changes.data || changes.columns || changes.formatters) {
                this.createDataTable();
                this.wrapper.setDataTable(this.dataTable);
                shouldRedraw = true;
            }
            if (changes.type) {
                this.wrapper.setChartType(this.type);
                shouldRedraw = true;
            }
            if (changes.options || changes.width || changes.height || changes.title) {
                this.wrapper.setOptions(this.mergeOptions());
                shouldRedraw = true;
            }
            if (shouldRedraw) {
                this.drawChart();
            }
        }
    }
    createDataTable() {
        if (this.data == null) {
            return;
        }
        let firstRowIsData = true;
        if (this.columns != null) {
            firstRowIsData = false;
        }
        this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
        this.applyFormatters(this.dataTable);
    }
    getDataAsTable() {
        if (this.columns) {
            return [this.columns, ...this.data];
        }
        else {
            return this.data;
        }
    }
    updateResizeListener() {
        if (this.resizeSubscription != null) {
            this.resizeSubscription.unsubscribe();
            this.resizeSubscription = null;
        }
        if (this.dynamicResize) {
            this.resizeSubscription = fromEvent(window, 'resize')
                .pipe(debounceTime(100))
                .subscribe(() => {
                if (this.initialized) {
                    this.drawChart();
                }
            });
        }
    }
    mergeOptions() {
        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);
    }
    applyFormatters(dataTable) {
        if (this.formatters == null) {
            return;
        }
        for (const val of this.formatters) {
            val.formatter.format(dataTable, val.colIndex);
        }
    }
    registerChartEvents() {
        google.visualization.events.removeAllListeners(this.wrapper);
        const registerChartEvent = (object, eventName, callback) => {
            google.visualization.events.addListener(object, eventName, callback);
        };
        registerChartEvent(this.wrapper, 'ready', () => {
            // This could also be done by checking if we already subscribed to the events
            google.visualization.events.removeAllListeners(this.chart);
            registerChartEvent(this.chart, 'onmouseover', (event) => this.mouseover.emit(event));
            registerChartEvent(this.chart, 'onmouseout', (event) => this.mouseleave.emit(event));
            registerChartEvent(this.chart, 'select', () => {
                const selection = this.chart.getSelection();
                this.select.emit({ selection });
            });
            this.ready.emit({ chart: this.chart });
        });
        registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));
    }
    drawChart() {
        if (this.dashboard != null) {
            // If this chart is part of a dashboard, the dashboard takes care of drawing
            return;
        }
        this.wrapper.draw();
    }
};
GoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) { return new (t || GoogleChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService), ɵngcc0.ɵɵdirectiveInject(DashboardComponent, 8)); };
GoogleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GoogleChartComponent, selectors: [["google-chart"]], hostAttrs: [1, "google-chart"], inputs: { options: "options", dynamicResize: "dynamicResize", type: "type", data: "data", columns: "columns", title: "title", width: "width", height: "height", formatters: "formatters" }, outputs: { ready: "ready", error: "error", select: "select", mouseover: "mouseover", mouseleave: "mouseleave" }, exportAs: ["googleChart"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function GoogleChartComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] { width: fit-content; display: block; }"], changeDetection: 0 });
GoogleChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService },
    { type: DashboardComponent, decorators: [{ type: Optional }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], GoogleChartComponent.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], GoogleChartComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], GoogleChartComponent.prototype, "columns", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], GoogleChartComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], GoogleChartComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], GoogleChartComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], GoogleChartComponent.prototype, "formatters", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "dynamicResize", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "ready", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "error", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "select", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "mouseover", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GoogleChartComponent.prototype, "mouseleave", void 0);
GoogleChartComponent = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        ScriptLoaderService,
        DashboardComponent])
], GoogleChartComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartComponent, [{
        type: Component,
        args: [{
                selector: 'google-chart',
                template: '',
                host: { class: 'google-chart' },
                exportAs: 'googleChart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScriptLoaderService }, { type: DashboardComponent, decorators: [{
                type: Optional
            }] }]; }, { options: [{
            type: Input
        }], dynamicResize: [{
            type: Input
        }], ready: [{
            type: Output
        }], error: [{
            type: Output
        }], select: [{
            type: Output
        }], mouseover: [{
            type: Output
        }], mouseleave: [{
            type: Output
        }], type: [{
            type: Input
        }], data: [{
            type: Input
        }], columns: [{
            type: Input
        }], title: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], formatters: [{
            type: Input
        }] }); })();
export { GoogleChartComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,