import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartEditorRef } from './chart-editor-ref';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let ChartEditorComponent = class ChartEditorComponent {
    constructor(scriptLoaderService) {
        this.scriptLoaderService = scriptLoaderService;
        this.initializedSubject = new Subject();
    }
    /**
     * Emits as soon as the chart editor is fully initialized.
     */
    get initialized$() {
        return this.initializedSubject.asObservable();
    }
    ngOnInit() {
        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {
            this.editor = new google.visualization.ChartEditor();
            this.initializedSubject.next(this.editor);
            this.initializedSubject.complete();
        });
    }
    editChart(component, options) {
        const handle = new ChartEditorRef(this.editor);
        this.editor.openDialog(component.chartWrapper, options || {});
        handle.afterClosed().subscribe(result => {
            if (result) {
                component.chartWrapper = result;
            }
        });
        return handle;
    }
};
ChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) { return new (t || ChartEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
ChartEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartEditorComponent, selectors: [["chart-editor"]], hostAttrs: [1, "chart-editor"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ChartEditorComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
ChartEditorComponent = __decorate([ __metadata("design:paramtypes", [ScriptLoaderService])
], ChartEditorComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartEditorComponent, [{
        type: Component,
        args: [{
                selector: 'chart-editor',
                template: `<ng-content></ng-content>`,
                host: { class: 'chart-editor' },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ScriptLoaderService }]; }, null); })();
export { ChartEditorComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItZ29vZ2xlLWNoYXJ0cy9saWIvY29tcG9uZW50cy9jaGFydC1lZGl0b3IvY2hhcnQtZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBR2hGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQVFwRCxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtBQUFHLElBSWxDLFlBQW9CLG1CQUF3QztBQUFJLFFBQTVDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFBQyxRQUZyRCx1QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBb0MsQ0FBQztBQUMvRSxJQUNpRSxDQUFDO0FBQ2xFLElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLElBQVcsWUFBWTtBQUN6QixRQUFJLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2xELElBQUUsQ0FBQztBQUNILElBQ1MsUUFBUTtBQUNqQixRQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQzdFLFlBQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0QsWUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoRCxZQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN6QyxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFVUyxTQUFTLENBQUMsU0FBb0IsRUFBRSxPQUFpRDtBQUMxRixRQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRCxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLFFBQ0ksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUM1QyxZQUFNLElBQUksTUFBTSxFQUFFO0FBQ2xCLGdCQUFRLFNBQVMsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0FBQ3hDLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSCxDQUFDOzs7OztpREFBQTtBQUNEO0FBQThDLFlBdkNILG1CQUFtQjtBQUFHO0FBSnBELG9CQUFvQixvQkFOaEMsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFLGNBQWMsakRBS3RCLGtDQUl1QyxtQkFBbUI7R0FSNUQsUUFBUSxFQUFFLGJBUXFELEdBSnBELG9CQUFvQixDQTBDaEM7Y0E5Q3NDLFVBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsVUFDL0I7Q0FBZSxFQUFFO0NBQXVCLENBQUMsTUFBTSxNQUNoRCxDQUFDOzs7Ozs7NkVBNENGO0FBQUMsU0EzQ1ksb0JBQW9CO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NjcmlwdC1sb2FkZXIvc2NyaXB0LWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXJ0QmFzZSB9IGZyb20gJy4uL2NoYXJ0LWJhc2UvY2hhcnQtYmFzZS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBDaGFydEVkaXRvclJlZiB9IGZyb20gJy4vY2hhcnQtZWRpdG9yLXJlZic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NoYXJ0LWVkaXRvcicsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjaGFydC1lZGl0b3InIH0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENoYXJ0RWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBlZGl0b3I6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yO1xuICBwcml2YXRlIGluaXRpYWxpemVkU3ViamVjdCA9IG5ldyBTdWJqZWN0PGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NyaXB0TG9hZGVyU2VydmljZTogU2NyaXB0TG9hZGVyU2VydmljZSkge31cblxuICAvKipcbiAgICogRW1pdHMgYXMgc29vbiBhcyB0aGUgY2hhcnQgZWRpdG9yIGlzIGZ1bGx5IGluaXRpYWxpemVkLlxuICAgKi9cbiAgcHVibGljIGdldCBpbml0aWFsaXplZCQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2NyaXB0TG9hZGVyU2VydmljZS5sb2FkQ2hhcnRQYWNrYWdlcygnY2hhcnRlZGl0b3InKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5lZGl0b3IgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3IoKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0Lm5leHQodGhpcy5lZGl0b3IpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgY2hhcnQgZWRpdG9yIGFzIGFuIGVtYmVkZGVkIGRpYWxvZyBib3ggb24gdGhlIHBhZ2UuXG4gICAqIElmIHRoZSBlZGl0b3IgZ2V0cyBzYXZlZCwgdGhlIGNvbXBvbmVudHMnIGNoYXJ0IHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNoYXJ0IHRvIGJlIGVkaXRlZC5cbiAgICogQHJldHVybnMgQSByZWZlcmVuY2UgdG8gdGhlIG9wZW4gZWRpdG9yLlxuICAgKi9cbiAgcHVibGljIGVkaXRDaGFydChjb21wb25lbnQ6IENoYXJ0QmFzZSk6IENoYXJ0RWRpdG9yUmVmO1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlLCBvcHRpb25zOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvck9wdGlvbnMpOiBDaGFydEVkaXRvclJlZjtcbiAgcHVibGljIGVkaXRDaGFydChjb21wb25lbnQ6IENoYXJ0QmFzZSwgb3B0aW9ucz86IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yT3B0aW9ucykge1xuICAgIGNvbnN0IGhhbmRsZSA9IG5ldyBDaGFydEVkaXRvclJlZih0aGlzLmVkaXRvcik7XG4gICAgdGhpcy5lZGl0b3Iub3BlbkRpYWxvZyhjb21wb25lbnQuY2hhcnRXcmFwcGVyLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIGhhbmRsZS5hZnRlckNsb3NlZCgpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBjb21wb25lbnQuY2hhcnRXcmFwcGVyID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZTtcbiAgfVxufVxuIl19