(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-timeago', ['@angular/core','exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory(global.ng.core,(global['ngx-timeago'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (ɵngcc0,exports,core,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isDefined(value) {
        return typeof value !== 'undefined' && value !== null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function coerceBooleanProperty(value) {
        return value != null && "" + value !== 'false';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    function dateParser(date) {
        var /** @type {?} */ parsed = new Date(date);
        if (!Number.isNaN(parsed.valueOf())) {
            return parsed;
        }
        var /** @type {?} */ parts = String(date).match(/\d+/g);
        if (parts === null || parts.length <= 2) {
            return parsed;
        }
        else {
            var _a = __read(parts.map(function (x) { return parseInt(x, 10); })), firstP = _a[0], secondP = _a[1], restPs = _a.slice(2);
            return new Date(Date.UTC.apply(Date, __spread([firstP, secondP - 1], restPs)));
        }
    }
    var /** @type {?} */ MINUTE = 60;
    var /** @type {?} */ HOUR = MINUTE * 60;
    var /** @type {?} */ DAY = HOUR * 24;
    var /** @type {?} */ WEEK = DAY * 7;
    var /** @type {?} */ MONTH = DAY * 30;
    var /** @type {?} */ YEAR = DAY * 365;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ TimeagoClock = (function () {
        function TimeagoClock() {
        }
        return TimeagoClock;
    }());
    var TimeagoDefaultClock = (function (_super) {
        __extends(TimeagoDefaultClock, _super);
        function TimeagoDefaultClock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} then
         * @return {?}
         */
        TimeagoDefaultClock.prototype.tick = /**
         * @param {?} then
         * @return {?}
         */
            function (then) {
                return rxjs.of(0)
                    .pipe(operators.expand(function () {
                    var /** @type {?} */ now = Date.now();
                    var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
                    var /** @type {?} */ period = seconds < MINUTE
                        ? 1000
                        : seconds < HOUR
                            ? 1000 * MINUTE
                            : seconds < DAY
                                ? 1000 * HOUR
                                : 0;
                    return period ? rxjs.timer(period) : rxjs.empty();
                }), operators.skip(1));
            };
TimeagoDefaultClock.ɵfac = function TimeagoDefaultClock_Factory(t) { return ɵTimeagoDefaultClock_BaseFactory(t || TimeagoDefaultClock); };
TimeagoDefaultClock.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoDefaultClock, factory: function (t) { return TimeagoDefaultClock.ɵfac(t); } });
var ɵTimeagoDefaultClock_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TimeagoDefaultClock);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoDefaultClock, [{
        type: core.Injectable
    }], null, null); })();
        return TimeagoDefaultClock;
    }(TimeagoClock));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * To modify the text displayed, create a new instance of TimeagoIntl and
     * include it in a custom provider
     */
    var TimeagoIntl = (function () {
        function TimeagoIntl() {
            /**
             * Stream that emits whenever the l10n strings are changed
             * Use this to notify directives if the l10n strings have changed after initialization.
             */
            this.changes = new rxjs.Subject();
        }
TimeagoIntl.ɵfac = function TimeagoIntl_Factory(t) { return new (t || TimeagoIntl)(); };
TimeagoIntl.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoIntl, factory: function (t) { return TimeagoIntl.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoIntl, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return TimeagoIntl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ defaultFormattter = function (then) {
        var /** @type {?} */ now = Date.now();
        var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
        var /** @type {?} */ suffix = then < now ? 'ago' : 'from now';
        var _a = __read(seconds < MINUTE
            ? [Math.round(seconds), 'second']
            : seconds < HOUR
                ? [Math.round(seconds / MINUTE), 'minute']
                : seconds < DAY
                    ? [Math.round(seconds / HOUR), 'hour']
                    : seconds < WEEK
                        ? [Math.round(seconds / DAY), 'day']
                        : seconds < MONTH
                            ? [Math.round(seconds / WEEK), 'week']
                            : seconds < YEAR
                                ? [Math.round(seconds / MONTH), 'month']
                                : [Math.round(seconds / YEAR), 'year'], 2), value = _a[0], unit = _a[1];
        return { value: value, unit: unit, suffix: suffix };
    };
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ TimeagoFormatter = (function () {
        function TimeagoFormatter() {
        }
        return TimeagoFormatter;
    }());
    var TimeagoDefaultFormatter = (function (_super) {
        __extends(TimeagoDefaultFormatter, _super);
        function TimeagoDefaultFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} then
         * @return {?}
         */
        TimeagoDefaultFormatter.prototype.format = /**
         * @param {?} then
         * @return {?}
         */
            function (then) {
                var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
                return this.parse(value, unit, suffix);
            };
        /**
         * @param {?} value
         * @param {?} unit
         * @param {?} suffix
         * @return {?}
         */
        TimeagoDefaultFormatter.prototype.parse = /**
         * @param {?} value
         * @param {?} unit
         * @param {?} suffix
         * @return {?}
         */
            function (value, unit, suffix) {
                if (value !== 1) {
                    unit += 's';
                }
                return value + ' ' + unit + ' ' + suffix;
            };
TimeagoDefaultFormatter.ɵfac = function TimeagoDefaultFormatter_Factory(t) { return ɵTimeagoDefaultFormatter_BaseFactory(t || TimeagoDefaultFormatter); };
TimeagoDefaultFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoDefaultFormatter, factory: function (t) { return TimeagoDefaultFormatter.ɵfac(t); } });
var ɵTimeagoDefaultFormatter_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TimeagoDefaultFormatter);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoDefaultFormatter, [{
        type: core.Injectable
    }], null, null); })();
        return TimeagoDefaultFormatter;
    }(TimeagoFormatter));
    var TimeagoCustomFormatter = (function (_super) {
        __extends(TimeagoCustomFormatter, _super);
        function TimeagoCustomFormatter(intl) {
            var _this = _super.call(this) || this;
            _this.intl = intl;
            return _this;
        }
        /**
         * @param {?} then
         * @return {?}
         */
        TimeagoCustomFormatter.prototype.format = /**
         * @param {?} then
         * @return {?}
         */
            function (then) {
                var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
                return this.parse(value, unit, suffix, Date.now(), then);
            };
        /**
         * @param {?} value
         * @param {?} unit
         * @param {?} suffix
         * @param {?} now
         * @param {?} then
         * @return {?}
         */
        TimeagoCustomFormatter.prototype.parse = /**
         * @param {?} value
         * @param {?} unit
         * @param {?} suffix
         * @param {?} now
         * @param {?} then
         * @return {?}
         */
            function (value, unit, suffix, now, then) {
                /** convert weeks to days if strings don't handle weeks */
                if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {
                    var /** @type {?} */ days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));
                    value = days;
                    unit = 'day';
                }
                /**
                 * create a normalize function for given value
                 */
                var /** @type {?} */ normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);
                /**
                 * The eventual return value stored in an array so that the wordSeparator can be used
                 */
                var /** @type {?} */ dateString = [];
                /** handle prefixes */
                if (suffix === 'ago' && this.intl.strings.prefixAgo) {
                    dateString.push(normalize(this.intl.strings.prefixAgo));
                }
                if (suffix === 'from now' && this.intl.strings.prefixFromNow) {
                    dateString.push(normalize(this.intl.strings.prefixFromNow));
                }
                /**
                 * Handle Main number and unit
                 */
                var /** @type {?} */ isPlural = value > 1;
                if (isPlural) {
                    var /** @type {?} */ stringFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;
                    dateString.push(normalize(stringFn));
                }
                else {
                    var /** @type {?} */ stringFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;
                    dateString.push(normalize(stringFn));
                }
                /** Handle Suffixes */
                if (suffix === 'ago' && this.intl.strings.suffixAgo) {
                    dateString.push(normalize(this.intl.strings.suffixAgo));
                }
                if (suffix === 'from now' && this.intl.strings.suffixFromNow) {
                    dateString.push(normalize(this.intl.strings.suffixFromNow));
                }
                /**
                 * join the array into a string and return it
                 */
                var /** @type {?} */ wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';
                return dateString.join(wordSeparator);
            };
        /**
         * If the numbers array is present, format numbers with it,
         * otherwise just cast the number to a string and return it
         * @param {?} numbers
         * @param {?} value
         * @return {?}
         */
        TimeagoCustomFormatter.prototype.normalizeNumber = /**
         * If the numbers array is present, format numbers with it,
         * otherwise just cast the number to a string and return it
         * @param {?} numbers
         * @param {?} value
         * @return {?}
         */
            function (numbers, value) {
                return numbers && numbers.length === 10
                    ? String(value).split('')
                        .map(function (digit) { return digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit; })
                        .join('')
                    : String(value);
            };
        /**
         * Take a string or a function that takes number of days and returns a string
         * and provide a uniform API to create string parts
         * @param {?} value
         * @param {?} millisDelta
         * @param {?=} numbers
         * @return {?}
         */
        TimeagoCustomFormatter.prototype.normalizeFn = /**
         * Take a string or a function that takes number of days and returns a string
         * and provide a uniform API to create string parts
         * @param {?} value
         * @param {?} millisDelta
         * @param {?=} numbers
         * @return {?}
         */
            function (value, millisDelta, numbers) {
                var _this = this;
                return function (stringOrFn) {
                    return typeof stringOrFn === 'function'
                        ? stringOrFn(value, millisDelta).replace(/%d/g, _this.normalizeNumber(numbers, value))
                        : stringOrFn.replace(/%d/g, _this.normalizeNumber(numbers, value));
                };
            };
        /** @nocollapse */
        TimeagoCustomFormatter.ctorParameters = function () {
            return [
                { type: TimeagoIntl }
            ];
        };
TimeagoCustomFormatter.ɵfac = function TimeagoCustomFormatter_Factory(t) { return new (t || TimeagoCustomFormatter)(ɵngcc0.ɵɵinject(TimeagoIntl)); };
TimeagoCustomFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoCustomFormatter, factory: function (t) { return TimeagoCustomFormatter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoCustomFormatter, [{
        type: core.Injectable
    }], function () { return [{ type: TimeagoIntl }]; }, null); })();
        return TimeagoCustomFormatter;
    }(TimeagoFormatter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimeagoDirective = (function () {
        function TimeagoDirective(intl, cd, formatter, element, clock) {
            var _this = this;
            this.cd = cd;
            this.clock = clock;
            /**
             * Emits on:
             * - Input change
             * - Intl change
             * - Clock tick
             */
            this.stateChanges = new rxjs.Subject();
            this._live = true;
            if (intl) {
                this.intlSubscription = intl.changes.subscribe(function () { return _this.stateChanges.next(); });
            }
            this.stateChanges.subscribe(function () {
                _this.setContent(element.nativeElement, formatter.format(_this.date));
                _this.cd.markForCheck();
            });
        }
        Object.defineProperty(TimeagoDirective.prototype, "date", {
            /** The Date to display. An actual Date object or something that can be fed to new Date. */
            get: /**
             * The Date to display. An actual Date object or something that can be fed to new Date.
             * @return {?}
             */ function () {
                return this._date;
            },
            set: /**
             * @param {?} date
             * @return {?}
             */ function (date) {
                var _this = this;
                this._date = dateParser(date).valueOf();
                if (this._date) {
                    if (this.clockSubscription) {
                        this.clockSubscription.unsubscribe();
                        this.clockSubscription = undefined;
                    }
                    this.clockSubscription = this.clock.tick(this.date)
                        .pipe(operators.filter(function () { return _this.live; }, this))
                        .subscribe(function () { return _this.stateChanges.next(); });
                }
                else {
                    throw new SyntaxError("Wrong parameter in TimeagoDirective. Expected a valid date, received: " + date);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeagoDirective.prototype, "live", {
            /** If the directive should update itself over time */
            get: /**
             * If the directive should update itself over time
             * @return {?}
             */ function () {
                return this._live;
            },
            set: /**
             * @param {?} live
             * @return {?}
             */ function (live) {
                this._live = coerceBooleanProperty(live);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TimeagoDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.stateChanges.next();
            };
        /**
         * @param {?} node
         * @param {?} content
         * @return {?}
         */
        TimeagoDirective.prototype.setContent = /**
         * @param {?} node
         * @param {?} content
         * @return {?}
         */
            function (node, content) {
                if (isDefined(node.textContent)) {
                    node.textContent = content;
                }
                else {
                    node.data = content;
                }
            };
        /**
         * @return {?}
         */
        TimeagoDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.intlSubscription) {
                    this.intlSubscription.unsubscribe();
                    this.intlSubscription = undefined;
                }
                if (this.clockSubscription) {
                    this.clockSubscription.unsubscribe();
                    this.clockSubscription = undefined;
                }
                this.stateChanges.complete();
            };
        /** @nocollapse */
        TimeagoDirective.ctorParameters = function () {
            return [
                { type: TimeagoIntl, decorators: [{ type: core.Optional }] },
                { type: core.ChangeDetectorRef },
                { type: TimeagoFormatter },
                { type: core.ElementRef },
                { type: TimeagoClock }
            ];
        };
        TimeagoDirective.propDecorators = {
            date: [{ type: core.Input }],
            live: [{ type: core.Input }]
        };
TimeagoDirective.ɵfac = function TimeagoDirective_Factory(t) { return new (t || TimeagoDirective)(ɵngcc0.ɵɵdirectiveInject(TimeagoIntl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TimeagoFormatter), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(TimeagoClock)); };
TimeagoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TimeagoDirective, selectors: [["", "timeago", ""]], inputs: { date: "date", live: "live" }, exportAs: ["timeago"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoDirective, [{
        type: core.Directive,
        args: [{
                selector: '[timeago]',
                exportAs: 'timeago'
            }]
    }], function () { return [{ type: TimeagoIntl, decorators: [{
                type: core.Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: TimeagoFormatter }, { type: ɵngcc0.ElementRef }, { type: TimeagoClock }]; }, { date: [{
            type: core.Input
        }], live: [{
            type: core.Input
        }] }); })();
        return TimeagoDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimeagoPipe = (function () {
        function TimeagoPipe(intl, cd, formatter, clock) {
            var _this = this;
            this.clock = clock;
            this.live = true;
            /**
             * Emits on:
             * - Input change
             * - Intl change
             * - Clock tick
             */
            this.stateChanges = new rxjs.Subject();
            if (intl) {
                this.intlSubscription = intl.changes.subscribe(function () { return _this.stateChanges.next(); });
            }
            this.stateChanges.subscribe(function () {
                _this.value = formatter.format(_this.date);
                cd.markForCheck();
            });
        }
        /**
         * @param {?} date
         * @param {...?} args
         * @return {?}
         */
        TimeagoPipe.prototype.transform = /**
         * @param {?} date
         * @param {...?} args
         * @return {?}
         */
            function (date) {
                var _this = this;
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var /** @type {?} */ _date = dateParser(date).valueOf();
                var /** @type {?} */ _live;
                _live = isDefined(args[0])
                    ? coerceBooleanProperty(args[0])
                    : this.live;
                if (this.date === _date && this.live === _live) {
                    return this.value;
                }
                this.date = _date;
                this.live = _live;
                if (this.date) {
                    if (this.clockSubscription) {
                        this.clockSubscription.unsubscribe();
                        this.clockSubscription = undefined;
                    }
                    this.clockSubscription = this.clock.tick(this.date)
                        .pipe(operators.filter(function () { return _this.live; }, this))
                        .subscribe(function () { return _this.stateChanges.next(); });
                    this.stateChanges.next();
                }
                else {
                    throw new SyntaxError("Wrong parameter in TimeagoPipe. Expected a valid date, received: " + date);
                }
                return this.value;
            };
        /**
         * @return {?}
         */
        TimeagoPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.intlSubscription) {
                    this.intlSubscription.unsubscribe();
                    this.intlSubscription = undefined;
                }
                if (this.clockSubscription) {
                    this.clockSubscription.unsubscribe();
                    this.clockSubscription = undefined;
                }
                this.stateChanges.complete();
            };
        /** @nocollapse */
        TimeagoPipe.ctorParameters = function () {
            return [
                { type: TimeagoIntl, decorators: [{ type: core.Optional }] },
                { type: core.ChangeDetectorRef },
                { type: TimeagoFormatter },
                { type: TimeagoClock }
            ];
        };
TimeagoPipe.ɵfac = function TimeagoPipe_Factory(t) { return new (t || TimeagoPipe)(ɵngcc0.ɵɵdirectiveInject(TimeagoIntl, 8), ɵngcc0.ɵɵinjectPipeChangeDetectorRef(), ɵngcc0.ɵɵdirectiveInject(TimeagoFormatter), ɵngcc0.ɵɵdirectiveInject(TimeagoClock)); };
TimeagoPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeago", type: TimeagoPipe, pure: false });
TimeagoPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoPipe, factory: function (t) { return TimeagoPipe.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoPipe, [{
        type: core.Injectable
    }, {
        type: core.Pipe,
        args: [{
                name: 'timeago',
                pure: false
            }]
    }], function () { return [{ type: TimeagoIntl, decorators: [{
                type: core.Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: TimeagoFormatter }, { type: TimeagoClock }]; }, null); })();
        return TimeagoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimeagoModule = (function () {
        function TimeagoModule() {
        }
        /**
         * Use this method in your root module to provide the TimeagoModule
         */
        /**
         * Use this method in your root module to provide the TimeagoModule
         * @param {?=} config
         * @return {?}
         */
        TimeagoModule.forRoot = /**
         * Use this method in your root module to provide the TimeagoModule
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: TimeagoModule,
                    providers: [
                        config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                        config.intl || [],
                        config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
                    ],
                };
            };
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         */
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} config
         * @return {?}
         */
        TimeagoModule.forChild = /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: TimeagoModule,
                    providers: [
                        config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                        config.intl || [],
                        config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
                    ],
                };
            };
TimeagoModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TimeagoModule });
TimeagoModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TimeagoModule_Factory(t) { return new (t || TimeagoModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimeagoModule, { declarations: [TimeagoDirective,
        TimeagoPipe], exports: [TimeagoDirective,
        TimeagoPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoModule, [{
        type: core.NgModule,
        args: [{
                declarations: [
                    TimeagoDirective,
                    TimeagoPipe,
                ],
                exports: [
                    TimeagoDirective,
                    TimeagoPipe,
                ]
            }]
    }], function () { return []; }, null); })();
        return TimeagoModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.TimeagoDirective = TimeagoDirective;
    exports.TimeagoPipe = TimeagoPipe;
    exports.TimeagoIntl = TimeagoIntl;
    exports.TimeagoClock = TimeagoClock;
    exports.TimeagoDefaultClock = TimeagoDefaultClock;
    exports.TimeagoFormatter = TimeagoFormatter;
    exports.TimeagoDefaultFormatter = TimeagoDefaultFormatter;
    exports.TimeagoCustomFormatter = TimeagoCustomFormatter;
    exports.TimeagoModule = TimeagoModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-timeago.umd.js.map