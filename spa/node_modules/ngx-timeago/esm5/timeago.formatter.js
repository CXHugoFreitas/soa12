/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { TimeagoIntl } from './timeago.intl';
import { MINUTE, HOUR, DAY, WEEK, MONTH, YEAR } from './util';
import * as ɵngcc0 from '@angular/core';
var /** @type {?} */ defaultFormattter = function (then) {
    var /** @type {?} */ now = Date.now();
    var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
    var /** @type {?} */ suffix = then < now ? 'ago' : 'from now';
    var _a = tslib_1.__read(seconds < MINUTE
        ? [Math.round(seconds), 'second']
        : seconds < HOUR
            ? [Math.round(seconds / MINUTE), 'minute']
            : seconds < DAY
                ? [Math.round(seconds / HOUR), 'hour']
                : seconds < WEEK
                    ? [Math.round(seconds / DAY), 'day']
                    : seconds < MONTH
                        ? [Math.round(seconds / WEEK), 'week']
                        : seconds < YEAR
                            ? [Math.round(seconds / MONTH), 'month']
                            : [Math.round(seconds / YEAR), 'year'], 2), value = _a[0], unit = _a[1];
    return { value: value, unit: unit, suffix: suffix };
};
var ɵ0 = defaultFormattter;
/**
 * @abstract
 */
var /**
 * @abstract
 */
TimeagoFormatter = /** @class */ (function () {
    function TimeagoFormatter() {
    }
    return TimeagoFormatter;
}());
/**
 * @abstract
 */
export { TimeagoFormatter };
function TimeagoFormatter_tsickle_Closure_declarations() {
    /**
     * @abstract
     * @param {?} then
     * @return {?}
     */
    TimeagoFormatter.prototype.format = function (then) { };
}
var TimeagoDefaultFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(TimeagoDefaultFormatter, _super);
    function TimeagoDefaultFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    function (value, unit, suffix) {
        if (value !== 1) {
            unit += 's';
        }
        return value + ' ' + unit + ' ' + suffix;
    };
TimeagoDefaultFormatter.ɵfac = function TimeagoDefaultFormatter_Factory(t) { return ɵTimeagoDefaultFormatter_BaseFactory(t || TimeagoDefaultFormatter); };
TimeagoDefaultFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoDefaultFormatter, factory: function (t) { return TimeagoDefaultFormatter.ɵfac(t); } });
var ɵTimeagoDefaultFormatter_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TimeagoDefaultFormatter);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoDefaultFormatter, [{
        type: Injectable
    }], null, null); })();
    return TimeagoDefaultFormatter;
}(TimeagoFormatter));
export { TimeagoDefaultFormatter };
var TimeagoCustomFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(TimeagoCustomFormatter, _super);
    function TimeagoCustomFormatter(intl) {
        var _this = _super.call(this) || this;
        _this.intl = intl;
        return _this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix, Date.now(), then);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    function (value, unit, suffix, now, then) {
        /** convert weeks to days if strings don't handle weeks */
        if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {
            var /** @type {?} */ days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));
            value = days;
            unit = 'day';
        }
        /**
         * create a normalize function for given value
         */
        var /** @type {?} */ normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);
        /**
         * The eventual return value stored in an array so that the wordSeparator can be used
         */
        var /** @type {?} */ dateString = [];
        /** handle prefixes */
        if (suffix === 'ago' && this.intl.strings.prefixAgo) {
            dateString.push(normalize(this.intl.strings.prefixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.prefixFromNow) {
            dateString.push(normalize(this.intl.strings.prefixFromNow));
        }
        /**
         * Handle Main number and unit
         */
        var /** @type {?} */ isPlural = value > 1;
        if (isPlural) {
            var /** @type {?} */ stringFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        else {
            var /** @type {?} */ stringFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        /** Handle Suffixes */
        if (suffix === 'ago' && this.intl.strings.suffixAgo) {
            dateString.push(normalize(this.intl.strings.suffixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.suffixFromNow) {
            dateString.push(normalize(this.intl.strings.suffixFromNow));
        }
        /**
         * join the array into a string and return it
         */
        var /** @type {?} */ wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';
        return dateString.join(wordSeparator);
    };
    /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeNumber = /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    function (numbers, value) {
        return numbers && numbers.length === 10
            ? String(value).split('')
                .map(function (digit) { return digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit; })
                .join('')
            : String(value);
    };
    /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeFn = /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    function (value, millisDelta, numbers) {
        var _this = this;
        return function (stringOrFn) {
            return typeof stringOrFn === 'function'
                ? stringOrFn(value, millisDelta).replace(/%d/g, _this.normalizeNumber(numbers, value))
                : stringOrFn.replace(/%d/g, _this.normalizeNumber(numbers, value));
        };
    };
    /** @nocollapse */
    TimeagoCustomFormatter.ctorParameters = function () { return [
        { type: TimeagoIntl }
    ]; };
TimeagoCustomFormatter.ɵfac = function TimeagoCustomFormatter_Factory(t) { return new (t || TimeagoCustomFormatter)(ɵngcc0.ɵɵinject(TimeagoIntl)); };
TimeagoCustomFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoCustomFormatter, factory: function (t) { return TimeagoCustomFormatter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoCustomFormatter, [{
        type: Injectable
    }], function () { return [{ type: TimeagoIntl }]; }, null); })();
    return TimeagoCustomFormatter;
}(TimeagoFormatter));
export { TimeagoCustomFormatter };
function TimeagoCustomFormatter_tsickle_Closure_declarations() {
    /** @type {?} */
    TimeagoCustomFormatter.prototype.intl;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5mb3JtYXR0ZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtdGltZWFnby90aW1lYWdvLmZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7QUFVOUQscUJBQU0saUJBQWlCLEdBQUcsVUFBUyxJQUFZO0FBQUksSUFDakQscUJBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN6QixJQUFFLHFCQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzFELElBQUUscUJBQU0sTUFBTSxHQUFXLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3pELElBQ0U7QUFDQztBQUNxQjtBQUNmO0FBQ2dDO0FBQ3ZCO0FBRWxCO0FBQ007QUFDUTtBQUNRO0FBRXJCO0FBQXlDO0FBQ1ksd0VBYjdDLGFBQUssRUFBRSxZQUFJLENBYW1DO0FBQ3ZELElBQ0UsTUFBTSxDQUFDLEVBQUMsS0FBSyxPQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUMsQ0FBQztBQUMvQixDQUFDLENBQUE7QUFDRDtBQUMyQjtBQUFJO0FBQzVCO0FBREg7QUFBUTtBQUFhO0FBQXJCO0FBQ087QUFDTjtBQUVHLDJCQXZDSjtBQUFFLElBcUNELENBQUE7QUFDRDtBQUNHO0FBQ0Q7QUFMRiw0QkFFQztBQUNEO0FBRTRDO0FBQVE7QUFD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LEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBbkNBLEFBcUNBLEFBQUEsQUFGQSxBQUVBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFYQSxBQUFBLEFBdkNBLEFBd0NBLEFBQUEsQUFBQSxBQUFBLEFBZUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUVBLEFBQUEsQUE1RUEsQUFBQSxBQXJEQSxBQUFBLEFBREEsQUF1REEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaW1lYWdvSW50bCB9IGZyb20gJy4vdGltZWFnby5pbnRsJztcbmltcG9ydCB7IE1JTlVURSwgSE9VUiwgREFZLCBXRUVLLCBNT05USCwgWUVBUiB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCB0eXBlIFVuaXQgPSAnc2Vjb25kJyB8ICdtaW51dGUnIHwgJ2hvdXInIHwgJ2RheScgfCAnd2VlaycgfCAnbW9udGgnIHwgJ3llYXInO1xuXG5leHBvcnQgdHlwZSBTdWZmaXggPSAnYWdvJyB8ICdmcm9tIG5vdyc7XG5cbmV4cG9ydCB0eXBlIFN0cmluZ09yRm4gPSAoKHZhbHVlOiBudW1iZXIsIG1pbGxpc0RlbHRhOiAgbnVtYmVyKSA9PiBzdHJpbmcpIHwgc3RyaW5nO1xuXG5leHBvcnQgdHlwZSBOdW1iZXJBcnJheSA9IFsgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nIF07XG5cbmNvbnN0IGRlZmF1bHRGb3JtYXR0dGVyID0gZnVuY3Rpb24odGhlbjogbnVtYmVyKToge3ZhbHVlOiBudW1iZXIsIHVuaXQ6IFVuaXQsIHN1ZmZpeDogU3VmZml4fSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKG5vdyAtIHRoZW4pIC8gMTAwMCk7XG4gIGNvbnN0IHN1ZmZpeDogU3VmZml4ID0gdGhlbiA8IG5vdyA/ICdhZ28nIDogJ2Zyb20gbm93JztcblxuICBjb25zdCBbdmFsdWUsIHVuaXRdOiBbbnVtYmVyLCBVbml0XSA9XG4gICAgc2Vjb25kcyA8IE1JTlVURVxuICAgICAgPyBbTWF0aC5yb3VuZChzZWNvbmRzKSwgJ3NlY29uZCddXG4gICAgICA6IHNlY29uZHMgPCBIT1VSXG4gICAgICAgID8gW01hdGgucm91bmQoc2Vjb25kcyAvIE1JTlVURSksICdtaW51dGUnXVxuICAgICAgICA6IHNlY29uZHMgPCBEQVlcbiAgICAgICAgICA/IFtNYXRoLnJvdW5kKHNlY29uZHMgLyBIT1VSKSwgJ2hvdXInXVxuICAgICAgICAgIDogc2Vjb25kcyA8IFdFRUtcbiAgICAgICAgICAgID8gW01hdGgucm91bmQoc2Vjb25kcyAvIERBWSksICdkYXknXVxuICAgICAgICAgICAgOiBzZWNvbmRzIDwgTU9OVEhcbiAgICAgICAgICAgICAgPyBbTWF0aC5yb3VuZChzZWNvbmRzIC8gV0VFSyksICd3ZWVrJ11cbiAgICAgICAgICAgICAgOiBzZWNvbmRzIDwgWUVBUlxuICAgICAgICAgICAgICAgID8gW01hdGgucm91bmQoc2Vjb25kcyAvIE1PTlRIKSwgJ21vbnRoJ11cbiAgICAgICAgICAgICAgICA6IFtNYXRoLnJvdW5kKHNlY29uZHMgLyBZRUFSKSwgJ3llYXInXTtcblxuICByZXR1cm4ge3ZhbHVlLCB1bml0LCBzdWZmaXh9O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGltZWFnb0Zvcm1hdHRlciB7XG4gIGFic3RyYWN0IGZvcm1hdCh0aGVuOiBudW1iZXIpOiBzdHJpbmdcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVhZ29EZWZhdWx0Rm9ybWF0dGVyIGV4dGVuZHMgVGltZWFnb0Zvcm1hdHRlciB7XG4gIGZvcm1hdCh0aGVuOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHtzdWZmaXgsIHZhbHVlLCB1bml0fSA9IGRlZmF1bHRGb3JtYXR0dGVyKHRoZW4pO1xuICAgIHJldHVybiB0aGlzLnBhcnNlKHZhbHVlLCB1bml0LCBzdWZmaXgpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZSh2YWx1ZTogbnVtYmVyLCB1bml0OiBVbml0LCBzdWZmaXg6IFN1ZmZpeCk6IHN0cmluZyB7XG4gICAgaWYgKHZhbHVlICE9PSAxKSB7XG4gICAgICB1bml0ICs9ICdzJztcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlICsgJyAnICsgdW5pdCArICcgJyArIHN1ZmZpeDtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZWFnb0N1c3RvbUZvcm1hdHRlciBleHRlbmRzIFRpbWVhZ29Gb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGludGw6IFRpbWVhZ29JbnRsKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGZvcm1hdCh0aGVuOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHtzdWZmaXgsIHZhbHVlLCB1bml0fSA9IGRlZmF1bHRGb3JtYXR0dGVyKHRoZW4pO1xuICAgIHJldHVybiB0aGlzLnBhcnNlKHZhbHVlLCB1bml0LCBzdWZmaXgsIERhdGUubm93KCksIHRoZW4pO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZSh2YWx1ZTogbnVtYmVyLCB1bml0OiBVbml0LCBzdWZmaXg6IFN1ZmZpeCwgbm93OiBudW1iZXIsIHRoZW46IG51bWJlcikge1xuICAgIC8qKiBjb252ZXJ0IHdlZWtzIHRvIGRheXMgaWYgc3RyaW5ncyBkb24ndCBoYW5kbGUgd2Vla3MgKi9cbiAgICBpZiAodW5pdCA9PT0gJ3dlZWsnICYmICF0aGlzLmludGwuc3RyaW5ncy53ZWVrICYmICF0aGlzLmludGwuc3RyaW5ncy53ZWVrcykge1xuICAgICAgY29uc3QgZGF5cyA9IE1hdGgucm91bmQoTWF0aC5hYnMobm93IC0gdGhlbikgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuICAgICAgdmFsdWUgPSBkYXlzO1xuICAgICAgdW5pdCA9ICdkYXknO1xuICAgIH1cblxuICAgIC8qKiBjcmVhdGUgYSBub3JtYWxpemUgZnVuY3Rpb24gZm9yIGdpdmVuIHZhbHVlICovXG4gICAgY29uc3Qgbm9ybWFsaXplID0gdGhpcy5ub3JtYWxpemVGbih2YWx1ZSwgbm93IC0gdGhlbiwgdGhpcy5pbnRsLnN0cmluZ3MubnVtYmVycyk7XG5cbiAgICAvKiogVGhlIGV2ZW50dWFsIHJldHVybiB2YWx1ZSBzdG9yZWQgaW4gYW4gYXJyYXkgc28gdGhhdCB0aGUgd29yZFNlcGFyYXRvciBjYW4gYmUgdXNlZCAqL1xuICAgIGNvbnN0IGRhdGVTdHJpbmc6IHN0cmluZ1tdID0gW107XG5cbiAgICAvKiogaGFuZGxlIHByZWZpeGVzICovXG4gICAgaWYgKHN1ZmZpeCA9PT0gJ2FnbycgJiYgdGhpcy5pbnRsLnN0cmluZ3MucHJlZml4QWdvKSB7XG4gICAgICBkYXRlU3RyaW5nLnB1c2gobm9ybWFsaXplKHRoaXMuaW50bC5zdHJpbmdzLnByZWZpeEFnbykpO1xuICAgIH1cbiAgICBpZiAoc3VmZml4ID09PSAnZnJvbSBub3cnICYmIHRoaXMuaW50bC5zdHJpbmdzLnByZWZpeEZyb21Ob3cpIHtcbiAgICAgIGRhdGVTdHJpbmcucHVzaChub3JtYWxpemUodGhpcy5pbnRsLnN0cmluZ3MucHJlZml4RnJvbU5vdykpO1xuICAgIH1cblxuICAgIC8qKiBIYW5kbGUgTWFpbiBudW1iZXIgYW5kIHVuaXQgKi9cbiAgICBjb25zdCBpc1BsdXJhbCA9IHZhbHVlID4gMTtcbiAgICBpZiAoaXNQbHVyYWwpIHtcbiAgICAgIGNvbnN0IHN0cmluZ0ZuOiBTdHJpbmdPckZuID0gdGhpcy5pbnRsLnN0cmluZ3NbdW5pdCArICdzJ10gfHwgdGhpcy5pbnRsLnN0cmluZ3NbdW5pdF0gfHwgJyVkICcgKyB1bml0O1xuICAgICAgZGF0ZVN0cmluZy5wdXNoKG5vcm1hbGl6ZShzdHJpbmdGbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdHJpbmdGbjogU3RyaW5nT3JGbiA9IHRoaXMuaW50bC5zdHJpbmdzW3VuaXRdIHx8IHRoaXMuaW50bC5zdHJpbmdzW3VuaXQgKyAncyddIHx8ICclZCAnICsgdW5pdDtcbiAgICAgIGRhdGVTdHJpbmcucHVzaChub3JtYWxpemUoc3RyaW5nRm4pKTtcbiAgICB9XG5cbiAgICAvKiogSGFuZGxlIFN1ZmZpeGVzICovXG4gICAgaWYgKHN1ZmZpeCA9PT0gJ2FnbycgJiYgdGhpcy5pbnRsLnN0cmluZ3Muc3VmZml4QWdvKSB7XG4gICAgICBkYXRlU3RyaW5nLnB1c2gobm9ybWFsaXplKHRoaXMuaW50bC5zdHJpbmdzLnN1ZmZpeEFnbykpO1xuICAgIH1cbiAgICBpZiAoc3VmZml4ID09PSAnZnJvbSBub3cnICYmIHRoaXMuaW50bC5zdHJpbmdzLnN1ZmZpeEZyb21Ob3cpIHtcbiAgICAgIGRhdGVTdHJpbmcucHVzaChub3JtYWxpemUodGhpcy5pbnRsLnN0cmluZ3Muc3VmZml4RnJvbU5vdykpO1xuICAgIH1cblxuICAgIC8qKiBqb2luIHRoZSBhcnJheSBpbnRvIGEgc3RyaW5nIGFuZCByZXR1cm4gaXQgKi9cbiAgICBjb25zdCB3b3JkU2VwYXJhdG9yID0gdHlwZW9mIHRoaXMuaW50bC5zdHJpbmdzLndvcmRTZXBhcmF0b3IgPT09ICdzdHJpbmcnID8gdGhpcy5pbnRsLnN0cmluZ3Mud29yZFNlcGFyYXRvciA6ICcgJztcbiAgICByZXR1cm4gZGF0ZVN0cmluZy5qb2luKHdvcmRTZXBhcmF0b3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBudW1iZXJzIGFycmF5IGlzIHByZXNlbnQsIGZvcm1hdCBudW1iZXJzIHdpdGggaXQsXG4gICAqIG90aGVyd2lzZSBqdXN0IGNhc3QgdGhlIG51bWJlciB0byBhIHN0cmluZyBhbmQgcmV0dXJuIGl0XG4gICovXG4gIHByaXZhdGUgbm9ybWFsaXplTnVtYmVyKG51bWJlcnM6IE51bWJlckFycmF5LCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlcnMgJiYgbnVtYmVycy5sZW5ndGggPT09IDEwXG4gICAgICA/IFN0cmluZyh2YWx1ZSkuc3BsaXQoJycpXG4gICAgICAgICAgLm1hcCgoZGlnaXQ6IHN0cmluZykgPT4gZGlnaXQubWF0Y2goL15bMC05XSQvKSA/IG51bWJlcnNbcGFyc2VJbnQoZGlnaXQsIDEwKV0gOiBkaWdpdClcbiAgICAgICAgICAuam9pbignJylcbiAgICAgIDogU3RyaW5nKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBudW1iZXIgb2YgZGF5cyBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICAgKiBhbmQgcHJvdmlkZSBhIHVuaWZvcm0gQVBJIHRvIGNyZWF0ZSBzdHJpbmcgcGFydHNcbiAgKi9cbiAgcHJpdmF0ZSBub3JtYWxpemVGbih2YWx1ZTogbnVtYmVyLCBtaWxsaXNEZWx0YTogbnVtYmVyLCBudW1iZXJzPzogTnVtYmVyQXJyYXkpIHtcbiAgICByZXR1cm4gKHN0cmluZ09yRm46IFN0cmluZ09yRm4pID0+XG4gICAgICB0eXBlb2Ygc3RyaW5nT3JGbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBzdHJpbmdPckZuKHZhbHVlLCBtaWxsaXNEZWx0YSkucmVwbGFjZSgvJWQvZywgdGhpcy5ub3JtYWxpemVOdW1iZXIobnVtYmVycywgdmFsdWUpKVxuICAgICAgOiBzdHJpbmdPckZuLnJlcGxhY2UoLyVkL2csIHRoaXMubm9ybWFsaXplTnVtYmVyKG51bWJlcnMsIHZhbHVlKSk7XG4gIH1cbn1cbiJdfQ==