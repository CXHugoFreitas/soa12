/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Pipe, Optional, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { TimeagoClock } from './timeago.clock';
import { TimeagoFormatter } from './timeago.formatter';
import { TimeagoIntl } from './timeago.intl';
import { isDefined, coerceBooleanProperty, dateParser } from './util';
import { filter } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
export class TimeagoPipe {
    /**
     * @param {?} intl
     * @param {?} cd
     * @param {?} formatter
     * @param {?} clock
     */
    constructor(intl, cd, formatter, clock) {
        this.clock = clock;
        this.live = true;
        /**
         * Emits on:
         * - Input change
         * - Intl change
         * - Clock tick
         */
        this.stateChanges = new Subject();
        if (intl) {
            this.intlSubscription = intl.changes.subscribe(() => this.stateChanges.next());
        }
        this.stateChanges.subscribe(() => {
            this.value = formatter.format(this.date);
            cd.markForCheck();
        });
    }
    /**
     * @param {?} date
     * @param {...?} args
     * @return {?}
     */
    transform(date, ...args) {
        const /** @type {?} */ _date = dateParser(date).valueOf();
        let /** @type {?} */ _live;
        _live = isDefined(args[0])
            ? coerceBooleanProperty(args[0])
            : this.live;
        if (this.date === _date && this.live === _live) {
            return this.value;
        }
        this.date = _date;
        this.live = _live;
        if (this.date) {
            if (this.clockSubscription) {
                this.clockSubscription.unsubscribe();
                this.clockSubscription = undefined;
            }
            this.clockSubscription = this.clock.tick(this.date)
                .pipe(filter(() => this.live, this))
                .subscribe(() => this.stateChanges.next());
            this.stateChanges.next();
        }
        else {
            throw new SyntaxError(`Wrong parameter in TimeagoPipe. Expected a valid date, received: ${date}`);
        }
        return this.value;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
            this.intlSubscription = undefined;
        }
        if (this.clockSubscription) {
            this.clockSubscription.unsubscribe();
            this.clockSubscription = undefined;
        }
        this.stateChanges.complete();
    }
}
TimeagoPipe.ɵfac = function TimeagoPipe_Factory(t) { return new (t || TimeagoPipe)(ɵngcc0.ɵɵdirectiveInject(TimeagoIntl, 8), ɵngcc0.ɵɵinjectPipeChangeDetectorRef(), ɵngcc0.ɵɵdirectiveInject(TimeagoFormatter), ɵngcc0.ɵɵdirectiveInject(TimeagoClock)); };
TimeagoPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeago", type: TimeagoPipe, pure: false });
TimeagoPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoPipe, factory: TimeagoPipe.ɵfac });
/** @nocollapse */
TimeagoPipe.ctorParameters = () => [
    { type: TimeagoIntl, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: TimeagoFormatter },
    { type: TimeagoClock }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoPipe, [{
        type: Injectable
    }, {
        type: Pipe,
        args: [{
                name: 'timeago',
                pure: false
            }]
    }], function () { return [{ type: TimeagoIntl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: TimeagoFormatter }, { type: TimeagoClock }]; }, null); })();
function TimeagoPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    TimeagoPipe.prototype.intlSubscription;
    /** @type {?} */
    TimeagoPipe.prototype.clockSubscription;
    /** @type {?} */
    TimeagoPipe.prototype.date;
    /** @type {?} */
    TimeagoPipe.prototype.value;
    /** @type {?} */
    TimeagoPipe.prototype.live;
    /**
     * Emits on:
     * - Input change
     * - Intl change
     * - Clock tick
     * @type {?}
     */
    TimeagoPipe.prototype.stateChanges;
    /** @type {?} */
    TimeagoPipe.prototype.clock;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,