/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of, empty, timer } from 'rxjs';
import { expand, skip } from 'rxjs/operators';
import { MINUTE, HOUR, DAY } from './util';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
export class TimeagoClock {
}
function TimeagoClock_tsickle_Closure_declarations() {
    /**
     * @abstract
     * @param {?} then
     * @return {?}
     */
    TimeagoClock.prototype.tick = function (then) { };
}
export class TimeagoDefaultClock extends TimeagoClock {
    /**
     * @param {?} then
     * @return {?}
     */
    tick(then) {
        return of(0)
            .pipe(expand(() => {
            const /** @type {?} */ now = Date.now();
            const /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
            const /** @type {?} */ period = seconds < MINUTE
                ? 1000
                : seconds < HOUR
                    ? 1000 * MINUTE
                    : seconds < DAY
                        ? 1000 * HOUR
                        : 0;
            return period ? timer(period) : empty();
        }), skip(1));
    }
}
TimeagoDefaultClock.ɵfac = function TimeagoDefaultClock_Factory(t) { return ɵTimeagoDefaultClock_BaseFactory(t || TimeagoDefaultClock); };
TimeagoDefaultClock.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeagoDefaultClock, factory: TimeagoDefaultClock.ɵfac });
const ɵTimeagoDefaultClock_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TimeagoDefaultClock);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeagoDefaultClock, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5jbG9jay5qcyIsInNvdXJjZXMiOlsibmc6L25neC10aW1lYWdvL3RpbWVhZ28uY2xvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzNDO0FBQ0c7QUFBYTs7QUFBaEIsTUFBTTtBQUFzQixDQUUzQjtBQUNEO0FBRXdDO0FBQVE7QUFDdkM7QUFBdUI7QUFDckI7QUFDVDtBQUVtQjtBQUxyQixNQUFNLDBCQUEyQixTQUFRLFlBQVk7QUFDckQ7QUFBUTtBQUF1QjtBQUNyQjtBQUNULElBRkMsSUFBSSxDQUFDLElBQVk7QUFBSSxRQUNuQixNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoQixhQUFPLElBQUksQ0FDSCxNQUFNLENBQUMsR0FBRyxFQUFFO0FBQ3BCLFlBQVUsdUJBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxZQUFVLHVCQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2xFLFlBQ1UsdUJBQU0sTUFBTSxHQUNWLE9BQU8sR0FBRyxNQUFNO0FBQzVCLGdCQUFjLENBQUMsQ0FBQyxJQUFJO0FBQ3BCLGdCQUFjLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSTtBQUM5QixvQkFBZ0IsQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNO0FBQy9CLG9CQUFnQixDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUc7QUFDL0Isd0JBQWtCLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSTtBQUMvQix3QkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixZQUNVLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEQsU0FBUyxDQUFDLEVBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7QUFDUixLQUFHO0FBQ0g7K0NBdkJDLFVBQVU7Ozs7OzBCQUNSOztBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUF0QkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBlbXB0eSwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGV4cGFuZCwgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1JTlVURSwgSE9VUiwgREFZIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRpbWVhZ29DbG9jayB7XG4gIGFic3RyYWN0IHRpY2sodGhlbjogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZWFnb0RlZmF1bHRDbG9jayBleHRlbmRzIFRpbWVhZ29DbG9jayB7XG4gIHRpY2sodGhlbjogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gb2YoMClcbiAgICAgIC5waXBlKFxuICAgICAgICBleHBhbmQoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgY29uc3Qgc2Vjb25kcyA9IE1hdGgucm91bmQoTWF0aC5hYnMobm93IC0gdGhlbikgLyAxMDAwKTtcblxuICAgICAgICAgIGNvbnN0IHBlcmlvZCA9XG4gICAgICAgICAgICBzZWNvbmRzIDwgTUlOVVRFXG4gICAgICAgICAgICAgID8gMTAwMFxuICAgICAgICAgICAgICA6IHNlY29uZHMgPCBIT1VSXG4gICAgICAgICAgICAgICAgPyAxMDAwICogTUlOVVRFXG4gICAgICAgICAgICAgICAgOiBzZWNvbmRzIDwgREFZXG4gICAgICAgICAgICAgICAgICA/IDEwMDAgKiBIT1VSXG4gICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICByZXR1cm4gcGVyaW9kID8gdGltZXIocGVyaW9kKSA6IGVtcHR5KCk7XG4gICAgICAgIH0pLFxuICAgICAgICBza2lwKDEpXG4gICAgICApO1xuICB9XG59XG4iXX0=